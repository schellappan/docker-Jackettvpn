#!/bin/bash
### BEGIN INIT INFO
# Provides: jackett
# Required-Start: $remote_fs $syslog
# Required-Stop: $remote_fs $syslog
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Starts Jackett
# Description: Start jackett on start. Change USER= before running
### END INIT INFO

# Author: Jesper Smith
# Edited by MarkusMcNugen [MarkusMcNugen/docker-qBittorrentvpn]
# Edited log paths for docker, added umask and group to chuid option

# Edited by DyonR [DyonR/docket-Jackettvpn]
# Edited so it would work for Jackett

# Edit the user that Jackett will run as.
USER=${PUID}
GROUP=${PGID}

PATH="/sbin:/usr/sbin:/bin:/usr/bin"
SCRIPTNAME="/etc/init.d/jackett"
NAME="jackett"
DESC="jackett"
PIDFILE="/var/run/$NAME.pid"
JACKETTLOGPATH="/config/Jackett/Logs/"
JACKETTLOG="log.txt"

DAEMON="/opt/Jackett/jackett"
DAEMON_ARGS="--NoRestart --NoUpdates"
DAEMONSTRING="$DAEMON $DAEMON_ARGS >> $JACKETTLOGPATH$JACKETTLOG 2>&1"

export DBUS_SESSION_BUS_ADDRESS=""
export XDG_CONFIG_HOME="/config" 
export XDG_DATA_HOME="/config" 

umask 002

# Read configuration variable file if it is present
#[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{

	# Check if log path exists. If it doesn't exist, create it.
	if [ ! -e $JACKETTLOGPATH ]; then
		mkdir -p $JACKETTLOGPATH
		chown -R ${PUID}:${PGID} /config/Jackett
	fi
	
	# Check for log file. If it doesn't exist, create it.
	if [ -f $JACKETTLOGPATH$JACKETTLOG ]; then
		echo "Logging to $JACKETTLOGPATH$JACKETTLOG."
	else
		echo "Log file $JACKETTLOGPATH$JACKETTLOG doesn't exist. Creating it..."
		touch $JACKETTLOGPATH$JACKETTLOG
		if [ -f $JACKETTLOGPATH$JACKETTLOG ]; then
			chown $USER:$GROUP $JACKETTLOGPATH$JACKETTLOG
			echo "Logfile created. Logging to $JACKETTLOGPATH$JACKETTLOG"
		else
			echo "Couldn't create logfile $JACKETTLOGPATH$JACKETTLOG. Please investigate."
		fi
	fi

		# Return
		# 0 if daemon has been started
		# 1 if daemon was already running
		# 2 if daemon could not be started

	start-stop-daemon --start --chuid $USER:$GROUP --test --quiet --make-pidfile --pidfile $PIDFILE --background --exec /bin/bash -- -c "$DAEMONSTRING" || return 1

	start-stop-daemon --start --chuid $USER:$GROUP --make-pidfile --pidfile $PIDFILE --background --exec /bin/bash -- -c "$DAEMONSTRING" || return 2
	sleep 1
	echo "[INFO] Started Jackett daemon successfully..." | ts '%Y-%m-%d %H:%M:%.S'
}

#
# Function that stops the daemon/service
#
do_stop()
{
	start-stop-daemon --stop --exec "$DAEMONPATH$DAEMON"
	sleep 2
	return "$?"
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
	;;
  restart|force-reload)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: service jackett {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac
